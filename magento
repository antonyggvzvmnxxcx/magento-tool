#!/usr/bin/env php
<?php
/**
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */

require_once __DIR__ . '/vendor/autoload.php'; 

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputOption;
use Magento\Console\Command\Context as ContextCommand;

$homeDir = $_SERVER['HOME'] . DIRECTORY_SEPARATOR . '.magento';
if (!file_exists($homeDir)) {
    mkdir($homeDir);
}

function loadContextMetadata($url) {
    $ch = curl_init();
    curl_setopt_array($ch, [
        CURLOPT_URL => $url,
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_FOLLOWLOCATION => true
    ]);
    $result = curl_exec($ch);
    curl_close($ch);
    return $result;
}

$app = new Application();
$contextList = new \Magento\Console\ContextList($homeDir);
$commands = [
    'context'        => new ContextCommand\Get($contextList),
    'context:load'   => new ContextCommand\Load($contextList),
    'context:list'   => new ContextCommand\GetList($contextList),
    'context:add'    => new ContextCommand\Add($contextList),
    'context:remove' => new ContextCommand\Remove($contextList),
    'context:set'    => new ContextCommand\Set($contextList),
];

if ($contextList->getCurrent()) {
    $contextData = $contextList->read()[$contextList->getCurrent()];
    if (isset($contextData->commands)) {
        foreach ($contextData->commands as $name => $commandData) {
            $command = new \Magento\Console\Command\Remote($contextData);
            $command->setDescription($commandData->description)
                ->setHelp($commandData->help);
            foreach ($commandData->definition->arguments as $argumentName => $argumentMeta) {
                $command->addArgument(
                    $argumentName,
                    $argumentMeta->is_required ? InputArgument::REQUIRED : InputArgument::OPTIONAL,
                    $argumentMeta->description,
                    $argumentMeta->default
                );
            }
            foreach ($commandData->definition->options as $argumentName => $argumentMeta) {
                $command->addOption(
                    $argumentName,
                    $argumentMeta->shortcut,
                    $argumentMeta->is_required ? InputOption::VALUE_REQUIRED : InputOption::VALUE_OPTIONAL,
                    $argumentMeta->description,
                    $argumentMeta->default
                );
            }

            $commands[$commandData->name] = $command;
        }
    }
}

array_walk($commands, function ($command, $name) use ($app) {
   $command->setName($name);
   $app->add($command);
});

$app->run();
